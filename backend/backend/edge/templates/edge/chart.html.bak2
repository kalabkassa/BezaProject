<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f2f2f2; /* Light gray background */
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .dropdown {
            display: inline-block;
            margin: 10px;
            position: relative;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #fff; /* White background */
            min-width: 300px;
            box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
            z-index: 1;
        }

        .dropdown:hover .dropdown-content {
            display: block;
        }

        .dropdown-button {
            background-color: #0077cc; /* Blue button background color */
            color: #fff; /* White button text color */
            border: none;
            padding: 10px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
            text-align: left;
        }

        .dropdown-button:hover {
            background-color: #0055aa; /* Darker blue on hover */
        }

        .dropdown-button span {
            margin-right: 5px;
        }

        .dropdown-button::after {
            content: "\25BE";
            float: right;
        }

        .chart-container {
            margin-top: 10px;
        }

        canvas {
            display: block;
            box-sizing: border-box;
            width: 100%;
            max-width: 800px;
            height: auto;
            border: 1px solid #ddd; /* Gray border around charts */
        }
    </style>
    <title>Vital Signs Chart</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        {% for d in data %}
        <div class="dropdown">
            <button class="dropdown-button">
                <span>{{ d.name }}</span>
            </button>
            <div class="dropdown-content">
                <div class="chart-container">
                    <canvas id="{{ d.name }}-chart"></canvas>
                </div>
            </div>
        </div>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                var ctx = document.getElementById("{{ d.name }}-chart").getContext('2d');
                 
            // <block:data:2>
            const data = {{d.heart_rates}};
            const data2 = {{d.temperature}};
            let prev = 100;
            let prev2 = 80;
            for (let i = 0; i < 1000; i++) {
            prev += 5 - Math.random() * 10;
            data.push({x: i, y: prev});
            prev2 += 5 - Math.random() * 10;
            data2.push({x: i, y: prev2});
            }
            // </block:data>

            // <block:animation:1>
            const totalDuration = 10000;
            const delayBetweenPoints = totalDuration / data.length;
            const previousY = (ctx) => ctx.index === 0 ? ctx.chart.scales.y.getPixelForValue(100) : ctx.chart.getDatasetMeta(ctx.datasetIndex).data[ctx.index - 1].getProps(['y'], true).y;
            const animation = {
            x: {
                type: 'number',
                easing: 'linear',
                duration: delayBetweenPoints,
                from: NaN, // the point is initially skipped
                delay(ctx) {
                if (ctx.type !== 'data' || ctx.xStarted) {
                    return 0;
                }
                ctx.xStarted = true;
                return ctx.index * delayBetweenPoints;
                }
            },
            y: {
                type: 'number',
                easing: 'linear',
                duration: delayBetweenPoints,
                from: previousY,
                delay(ctx) {
                if (ctx.type !== 'data' || ctx.yStarted) {
                    return 0;
                }
                ctx.yStarted = true;
                return ctx.index * delayBetweenPoints;
                }
            }
            };
            // </block:animation>

            // <block:config:0>
            const chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: {{d.timestamps|safe}},
                datasets: [{
                    label: "Heart Rate",
                    borderColor: 'rgb(255,99,132)',
                    borderWidth: 1,
                    radius: 0,
                    data: data,
                },
                {
                    label: "Temprature",
                    borderColor: 'rgb(54,162,235)',
                    borderWidth: 1,
                    radius: 0,
                    data: data2,
                }]
            },
            options: {
                animation,
                interaction: {
                intersect: false
                },
                plugins: {
                legend: false
                },
                scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Timestamp'
                            }
                        },
                        y: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Value'
                            }
                        }
                }
            }
            });
            // </block:config>
            });
        </script>
        {% endfor %}
    </div>
</body>
</html>
